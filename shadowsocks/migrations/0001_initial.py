# -*- coding: utf-8 -*-
# Generated by Django 1.11.7 on 2017-11-23 15:39
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import shadowsocks.tools


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('balance', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=10, null=True, verbose_name='余额')),
                ('invitecode', models.CharField(max_length=40, verbose_name='邀请码')),
                ('invitecode_num', models.PositiveIntegerField(default=5, verbose_name='可生成的邀请码数量')),
                ('invited_by', models.PositiveIntegerField(default=1, verbose_name='邀请人id')),
                ('level', models.PositiveIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(9), django.core.validators.MinValueValidator(0)], verbose_name='用户等级')),
                ('level_expire_time', models.DateTimeField(default=django.utils.timezone.now, help_text='等级有效期', verbose_name='等级有效期')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': '用户',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AlipayRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=64, verbose_name='用户名')),
                ('info_code', models.CharField(max_length=64, unique=True, verbose_name='流水号')),
                ('time', models.DateTimeField(auto_now_add=True, verbose_name='时间')),
                ('amount', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=10, null=True, verbose_name='金额')),
                ('money_code', models.CharField(max_length=64, unique=True, verbose_name='充值码')),
            ],
            options={
                'verbose_name_plural': '支付宝转账记录',
                'ordering': ('-time',),
            },
        ),
        migrations.CreateModel(
            name='AlipayRequest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=64, verbose_name='用户名')),
                ('info_code', models.CharField(max_length=64, unique=True, verbose_name='流水号')),
                ('time', models.DateTimeField(auto_now_add=True, verbose_name='时间')),
                ('amount', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=10, null=True, verbose_name='金额')),
            ],
            options={
                'verbose_name_plural': '支付宝申请记录',
                'ordering': ('-time',),
            },
        ),
        migrations.CreateModel(
            name='Aliveip',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_name', models.CharField(blank=True, max_length=50, null=True, verbose_name='用户名')),
                ('ip_address', models.GenericIPAddressField(verbose_name='在线ip')),
                ('local', models.CharField(blank=True, max_length=128, null=True, verbose_name='归属地')),
                ('time', models.DateTimeField(auto_now_add=True, verbose_name='时间')),
            ],
            options={
                'verbose_name_plural': '在线ip',
                'ordering': ('-time',),
            },
        ),
        migrations.CreateModel(
            name='Announcement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.DateTimeField(auto_now_add=True, verbose_name='时间')),
                ('body', models.TextField(verbose_name='主体')),
            ],
            options={
                'verbose_name_plural': '系统公告',
                'ordering': ('-time',),
            },
        ),
        migrations.CreateModel(
            name='Donate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.DateTimeField(auto_now_add=True, verbose_name='捐赠时间')),
                ('money', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=10, null=True, verbose_name='捐赠金额')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': '捐赠',
                'ordering': ('-time',),
            },
        ),
        migrations.CreateModel(
            name='InviteCode',
            fields=[
                ('type', models.IntegerField(choices=[(1, '公开'), (0, '不公开')], default=0, verbose_name='类型')),
                ('code_id', models.PositiveIntegerField(default=1, verbose_name='邀请人ID')),
                ('code', models.CharField(blank=True, default=shadowsocks.tools.get_long_random_string, max_length=40, primary_key=True, serialize=False, verbose_name='邀请码')),
                ('time_created', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('isused', models.BooleanField(default=False, verbose_name='是否使用')),
            ],
            options={
                'verbose_name_plural': '邀请码',
                'ordering': ('isused', '-time_created'),
            },
        ),
        migrations.CreateModel(
            name='MoneyCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.CharField(blank=True, max_length=128, null=True, verbose_name='用户名')),
                ('time', models.DateTimeField(auto_now_add=True, verbose_name='捐赠时间')),
                ('code', models.CharField(blank=True, default=shadowsocks.tools.get_long_random_string, max_length=40, unique=True, verbose_name='充值码')),
                ('number', models.DecimalField(blank=True, decimal_places=2, default=10, max_digits=10, null=True, verbose_name='捐赠金额')),
                ('isused', models.BooleanField(default=False, verbose_name='是否使用')),
            ],
            options={
                'verbose_name_plural': '充值码',
                'ordering': ('isused',),
            },
        ),
        migrations.CreateModel(
            name='Node',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('node_id', models.IntegerField(unique=True, verbose_name='节点id')),
                ('name', models.CharField(max_length=32, verbose_name='名字')),
                ('server', models.CharField(max_length=128, verbose_name='服务器IP')),
                ('method', models.CharField(choices=[('aes-256-cfb', 'aes-256-cfb'), ('aes-128-ctr', 'aes-128-ctr'), ('rc4-md5', 'rc4-md5'), ('salsa20', 'salsa20'), ('chacha20', 'chacha20'), ('none', 'none')], default='aes-128-ctr', max_length=32, verbose_name='加密类型')),
                ('custom_method', models.SmallIntegerField(choices=[(0, 0), (1, 1)], default=0, verbose_name='自定义加密')),
                ('traffic_rate', models.FloatField(default=1.0, verbose_name='流量比例')),
                ('protocol', models.CharField(choices=[('auth_sha1_v4', 'auth_sha1_v4'), ('auth_aes128_md5', 'auth_aes128_md5'), ('auth_aes128_sha1', 'auth_aes128_sha1'), ('auth_chain_a', 'auth_chain_a'), ('origin', 'origin')], default='auth_chain_a', max_length=32, verbose_name='协议')),
                ('obfs', models.CharField(choices=[('plain', 'plain'), ('http_simple', 'http_simple'), ('http_simple_compatible', 'http_simple_compatible'), ('http_post', 'http_post'), ('tls1.2_ticket_auth', 'tls1.2_ticket_auth')], default='http_simple', max_length=32, verbose_name='混淆')),
                ('info', models.CharField(blank=True, max_length=1024, null=True, verbose_name='节点说明')),
                ('status', models.CharField(choices=[('好用', '好用'), ('维护', '维护'), ('坏了', '坏了')], default='ok', max_length=32, verbose_name='状态')),
                ('level', models.PositiveIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(9), django.core.validators.MinValueValidator(0)], verbose_name='节点等级')),
                ('show', models.CharField(choices=[('显示', '显示'), ('不显示', '不显示')], default='显示', max_length=32, verbose_name='是否显示')),
                ('group', models.CharField(default='1', max_length=32, verbose_name='分组')),
            ],
            options={
                'verbose_name_plural': '节点',
                'db_table': 'ss_node',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='NodeInfoLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('node_id', models.IntegerField(verbose_name='节点id')),
                ('uptime', models.FloatField(verbose_name='更新时间')),
                ('load', models.CharField(max_length=32, verbose_name='负载')),
                ('log_time', models.IntegerField(verbose_name='日志时间')),
            ],
            options={
                'verbose_name_plural': '节点日志',
                'db_table': 'ss_node_info_log',
                'ordering': ('-log_time',),
            },
        ),
        migrations.CreateModel(
            name='NodeOnlineLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('node_id', models.IntegerField(verbose_name='节点id')),
                ('online_user', models.IntegerField(verbose_name='在线人数')),
                ('log_time', models.IntegerField(verbose_name='日志时间')),
            ],
            options={
                'verbose_name_plural': '节点在线记录',
                'db_table': 'ss_node_online_log',
            },
        ),
        migrations.CreateModel(
            name='PurchaseHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.CharField(max_length=128, verbose_name='购买者')),
                ('money', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=10, null=True, verbose_name='金额')),
                ('purchtime', models.DateTimeField(auto_now_add=True, verbose_name='购买时间')),
            ],
            options={
                'verbose_name_plural': '购买记录',
                'ordering': ('-purchtime',),
            },
        ),
        migrations.CreateModel(
            name='RebateRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.PositiveIntegerField(default=1, verbose_name='返利人ID')),
                ('money', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=10, null=True, verbose_name='金额')),
                ('rebatetime', models.DateTimeField(auto_now_add=True, verbose_name='返利时间')),
            ],
            options={
                'ordering': ('-rebatetime',),
            },
        ),
        migrations.CreateModel(
            name='Shop',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='待编辑', max_length=128, verbose_name='商品描述')),
                ('transfer', models.BigIntegerField(default=1, verbose_name='增加的流量(GB)')),
                ('money', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=10, null=True, verbose_name='金额')),
                ('level', models.PositiveIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(9), django.core.validators.MinValueValidator(0)], verbose_name='设置等级')),
                ('days', models.PositiveIntegerField(default=1, validators=[django.core.validators.MaxValueValidator(365), django.core.validators.MinValueValidator(1)], verbose_name='设置等级时间(天)')),
            ],
            options={
                'verbose_name_plural': '商品',
            },
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.DateTimeField(auto_now_add=True, verbose_name='时间')),
                ('title', models.CharField(max_length=128, verbose_name='标题')),
                ('body', models.TextField(verbose_name='内容主体')),
                ('status', models.CharField(choices=[('开启', '开启'), ('关闭', '关闭')], default='开启', max_length=10, verbose_name='状态')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': '工单',
                'ordering': ('-time',),
            },
        ),
        migrations.AddField(
            model_name='purchasehistory',
            name='info',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shadowsocks.Shop'),
        ),
        migrations.AddField(
            model_name='aliveip',
            name='node_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='alive_node_id', to='shadowsocks.Node'),
        ),
    ]
